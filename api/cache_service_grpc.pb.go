// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cache_service.proto

package __

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CacheService_Get_FullMethodName                     = "/pb.CacheService/Get"
	CacheService_Put_FullMethodName                     = "/pb.CacheService/Put"
	CacheService_Len_FullMethodName                     = "/pb.CacheService/Len"
	CacheService_GetPid_FullMethodName                  = "/pb.CacheService/GetPid"
	CacheService_GetLeader_FullMethodName               = "/pb.CacheService/GetLeader"
	CacheService_GetHeartbeat_FullMethodName            = "/pb.CacheService/GetHeartbeat"
	CacheService_UpdateLeader_FullMethodName            = "/pb.CacheService/UpdateLeader"
	CacheService_RequestElection_FullMethodName         = "/pb.CacheService/RequestElection"
	CacheService_GetClusterConfig_FullMethodName        = "/pb.CacheService/GetClusterConfig"
	CacheService_UpdateClusterConfig_FullMethodName     = "/pb.CacheService/UpdateClusterConfig"
	CacheService_RegisterNodeWithCluster_FullMethodName = "/pb.CacheService/RegisterNodeWithCluster"
)

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	// Get/Put operations
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Len(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LengthResponse, error)
	// Elections
	GetPid(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*PidResponse, error)
	GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
	GetHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateLeader(ctx context.Context, in *NewLeaderAnnouncement, opts ...grpc.CallOption) (*GenericResponse, error)
	RequestElection(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// Cluster management
	GetClusterConfig(ctx context.Context, in *ClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfig, error)
	UpdateClusterConfig(ctx context.Context, in *ClusterConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	RegisterNodeWithCluster(ctx context.Context, in *Node, opts ...grpc.CallOption) (*GenericResponse, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, CacheService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CacheService_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) Len(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LengthResponse, error) {
	out := new(LengthResponse)
	err := c.cc.Invoke(ctx, CacheService_Len_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetPid(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*PidResponse, error) {
	out := new(PidResponse)
	err := c.cc.Invoke(ctx, CacheService_GetPid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := c.cc.Invoke(ctx, CacheService_GetLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CacheService_GetHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UpdateLeader(ctx context.Context, in *NewLeaderAnnouncement, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CacheService_UpdateLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) RequestElection(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CacheService_RequestElection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetClusterConfig(ctx context.Context, in *ClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfig, error) {
	out := new(ClusterConfig)
	err := c.cc.Invoke(ctx, CacheService_GetClusterConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UpdateClusterConfig(ctx context.Context, in *ClusterConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CacheService_UpdateClusterConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) RegisterNodeWithCluster(ctx context.Context, in *Node, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CacheService_RegisterNodeWithCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	// Get/Put operations
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*empty.Empty, error)
	Len(context.Context, *empty.Empty) (*LengthResponse, error)
	// Elections
	GetPid(context.Context, *PidRequest) (*PidResponse, error)
	GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error)
	GetHeartbeat(context.Context, *HeartbeatRequest) (*empty.Empty, error)
	UpdateLeader(context.Context, *NewLeaderAnnouncement) (*GenericResponse, error)
	RequestElection(context.Context, *ElectionRequest) (*GenericResponse, error)
	// Cluster management
	GetClusterConfig(context.Context, *ClusterConfigRequest) (*ClusterConfig, error)
	UpdateClusterConfig(context.Context, *ClusterConfig) (*empty.Empty, error)
	RegisterNodeWithCluster(context.Context, *Node) (*GenericResponse, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCacheServiceServer) Put(context.Context, *PutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCacheServiceServer) Len(context.Context, *empty.Empty) (*LengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Len not implemented")
}
func (UnimplementedCacheServiceServer) GetPid(context.Context, *PidRequest) (*PidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPid not implemented")
}
func (UnimplementedCacheServiceServer) GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedCacheServiceServer) GetHeartbeat(context.Context, *HeartbeatRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartbeat not implemented")
}
func (UnimplementedCacheServiceServer) UpdateLeader(context.Context, *NewLeaderAnnouncement) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeader not implemented")
}
func (UnimplementedCacheServiceServer) RequestElection(context.Context, *ElectionRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestElection not implemented")
}
func (UnimplementedCacheServiceServer) GetClusterConfig(context.Context, *ClusterConfigRequest) (*ClusterConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfig not implemented")
}
func (UnimplementedCacheServiceServer) UpdateClusterConfig(context.Context, *ClusterConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterConfig not implemented")
}
func (UnimplementedCacheServiceServer) RegisterNodeWithCluster(context.Context, *Node) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNodeWithCluster not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_Len_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Len(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_Len_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Len(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetPid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetPid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetPid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetPid(ctx, req.(*PidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetLeader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UpdateLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLeaderAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UpdateLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UpdateLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UpdateLeader(ctx, req.(*NewLeaderAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_RequestElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RequestElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_RequestElection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RequestElection(ctx, req.(*ElectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetClusterConfig(ctx, req.(*ClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UpdateClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UpdateClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UpdateClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UpdateClusterConfig(ctx, req.(*ClusterConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_RegisterNodeWithCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RegisterNodeWithCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_RegisterNodeWithCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RegisterNodeWithCluster(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CacheService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _CacheService_Put_Handler,
		},
		{
			MethodName: "Len",
			Handler:    _CacheService_Len_Handler,
		},
		{
			MethodName: "GetPid",
			Handler:    _CacheService_GetPid_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _CacheService_GetLeader_Handler,
		},
		{
			MethodName: "GetHeartbeat",
			Handler:    _CacheService_GetHeartbeat_Handler,
		},
		{
			MethodName: "UpdateLeader",
			Handler:    _CacheService_UpdateLeader_Handler,
		},
		{
			MethodName: "RequestElection",
			Handler:    _CacheService_RequestElection_Handler,
		},
		{
			MethodName: "GetClusterConfig",
			Handler:    _CacheService_GetClusterConfig_Handler,
		},
		{
			MethodName: "UpdateClusterConfig",
			Handler:    _CacheService_UpdateClusterConfig_Handler,
		},
		{
			MethodName: "RegisterNodeWithCluster",
			Handler:    _CacheService_RegisterNodeWithCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_service.proto",
}
